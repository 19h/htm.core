# CircleCI Build Config
#   https://circleci.com/docs/2.0/configuration-reference/#section=configuration
#
# Targets:
#   - Max OS/X
#   - ARM64

version: 2
jobs:

  setup:
    macos:
      xcode: '10.1.0'
    working_directory: ~/numenta/htm.core
    parallelism: 1
    environment:
      XCODE_SCHEME: htm
      XCODE_WORKSPACE: htm
      ARCHFLAGS: -arch x86_64
    steps:
      # Machine Setup
      - run:
          name: Make sure to use OS X in CircleCI Web UI
          command: |
            if [[ "$OSTYPE" != "darwin"* ]]; then
              echo "Must set option to use OS X in CircleCI Web UI" && exit 1;
            fi
      - run: sudo systemsetup -settimezone 'GMT'
      - run:
          name: Installing cmake
          command: brew install cmake || brew install cmake
      - checkout


  # job: Mac OS/X raw ("build-debug"). This job runs C++ tests in Debug mode (=with extra checks)
  osx-build-debug:
    steps:
      - run:
          name: Build in Debug mode
          environment:
            VERBOSE: 1
          #     Building only the C++ library and unit_test executables.
          command: |
            mkdir -p build/scripts
            cd build/scripts
            cmake -DCMAKE_BUILD_TYPE=Debug  ../..
            make -j2 | grep -v -F '\\-\\- Installing:'
            make install 2>&1 | grep -v -F 'Installing:'
      - run:
          name: Test in Debug mode
          environment:
            VERBOSE: 1
          command: |
            cd ./build/Debug/bin
            ./unit_tests 
  
  
  
  # job: Mac OS/X raw ("build-release"). This job builds in Release mode, used for Python tests & for providing OSX binary release. 
  osx-build-release:
      - run:
          name: Restoring system python
          command: |
            echo 'python version: ' && python --version
            echo 'pip version: ' && python -m pip --version
            echo 'python version: ' && python --version
      # Dependencies
      # Restore the dependency cache
      #      - restore_cache:
      #    keys:
      #    # This branch if available
      #    - v1-dep-{{ .Branch }}-
      #    # Default branch if not
      #    - v1-dep-master-
      #    # Any branch if there are none on the default branch - this should be
      #    # unnecessary if you have your default branch configured correctly
      #    - v1-dep-
      - run:
          name: Installing python dependencies
          command: |
            python -m pip install --user --upgrade pip setuptools setuptools-scm wheel
            python -m pip install --no-cache-dir --user -r bindings/py/packaging/requirements.txt  --verbose || exit
      # Save dependency cache
      #      - save_cache:
      #    key: v1-dep-{{ .Branch }}-{{ epoch }}
      #    paths:
      #    # This is a broad list of cache paths to include many possible
      #    # development environments.
      #    - vendor/bundle
      #    - ~/virtualenvs
      #    - ~/.m2
      #    - ~/.ivy2
      #    - ~/.bundle
      #    - ~/.go_workspace
      #    - ~/.gradle
      #    - ~/.cache/bower


      # Build Release with python
      - run:
          name: Build in Release mode
          environment:
              VERBOSE: 1
          command: |
              python setup.py install --user  --prefix=
 
      # Test, run python unit test scripts
      - run:
          name: Running python tests
          command: python setup.py test
      - store_test_results:
          path: tests

      - run:
          name: Package Binary release for OSX
          command: |
            python setup.py bdist_wheel
            cd build/scripts
            make package

      - store_artifacts:
          path: build/scripts/*.tar.gz

      ##- persist_to_workspace:
      ##    root: dist
      ##    paths:
      ##    - htm.bindings*.whl
      ##    - requirements.txt
      ##    - include/htm
            #  deploy-s3:
            #machine: true
            #steps:
            #- attach_workspace:
            #at: dist
            #- run:
            #name: Deploying to S3
            #command: |
            #pip install awscli --upgrade --user
            #tar -zcv -f htm_core-${CIRCLE_SHA1}-darwin64.tar.gz dist
            #aws s3 cp htm_core-${CIRCLE_SHA1}-darwin64.tar.gz s3://artifacts.numenta.org/numenta/htm.core/circle/





  # job: ARM64 via Docker + QEMU ("arm64-build-test")
  arm64-build-test:
    parallelism: 1
    docker:
      # CircleCI base Debian 10 Buster with remote Docker access, etc.
      #   https://circleci.com/docs/2.0/circleci-images/#buildpack-deps
      - image: circleci/buildpack-deps:buster
    steps:
      - run:
          # This is for local test builds using the CircleCI terminal app.
          #   Local Docker seems to use sudo, CircleCI Docker does not.
          command: |
            if [[ $CIRCLE_SHELL_ENV == *"localbuild"* ]]; then
              echo "This is a local build. Enabling sudo for docker"
              echo 'export CI_SUDO="sudo"' >> $BASH_ENV
            else
              echo 'export CI_SUDO=' >> $BASH_ENV
            fi
            source $BASH_ENV
      - run: sudo apt-get -y install qemu-system
      - checkout
      - setup_remote_docker  # access circleci's custom docker service
      # make circleci x86_64/amd64 hardware think it's arm64 via docker+qemu
      - run: $CI_SUDO docker run --rm --privileged multiarch/qemu-user-static:register --reset
      - run:
          name: Running docker build on ARM64
          command: $CI_SUDO docker build -t htm-arm64-docker --build-arg arch=arm64 .
          no_output_timeout: 2h

workflows:
  version: 2
  osx-build-test-deploy: #runs on each commit
    jobs:
      - osx-build-debug:    # Mac OS/X raw ("build-debug")
          requires:
            - setup
      - osx-build-release:  # Mac OS/X raw ("build-release")
          requires:
            - setup
            - osx-build-debug # all C++ debug tests must pass before Release (and thus artifact) is created

  nightly: # build and tests taking long time (currecntly ARM64 build ~5hrs), runs only once a day
    triggers:
      - schedule:
          cron: "6 0 * * *" # 6am UTC every day
          filters:
            branches:
              only:
                - master
    jobs:
      - arm64-build-test  # ARM64 docker/qemu ("arm64-build-test")
