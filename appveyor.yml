#---------------------------------#
#      general configuration      #
#---------------------------------#
image: Visual Studio 2017
configuration: Release
platform: x64

build:
  parallel: true
  verbosity: minimal

# version format
version: 2.0.0-{build}

branches:
  only:
    - master
    - /^v.*\..*\..*$/ #regexp for tags "v*.*.*", eg v2.0.1-pre


skip_commits:
  # Add [av skip] to commit messages to skip AppVeyor building
  # Add [ci skip] to skip Travis and AppVeyor building
  message: /\[av skip\]/

# Do not build feature branch with open Pull Requests
# prevents two builds when a PR is pushed.
skip_branch_with_pr: true

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# http://www.appveyor.com/docs/environment-variables
# http://www.appveyor.com/docs/installed-software

init:
  - git config --global core.autocrlf input

clone_folder: c:\projects\htm-core
clone_depth: 1

# Can't have a shallow clone because the CMake process will be
# calling into git to write the current SHA into the binaries.
shallow_clone: false

environment:
  COMPILER_FAMILY: MSVC
  HTM_CORE: "C:\\projects\\htm-core"
  ARTIFACTS_DIR: "%HTM_CORE%\\build\\artifacts"
  configuration: "Release"
  GITHUB_TOKEN: "fX0sRFrScPzNxDgmzcihMg3m42f85w4SFKN9T2Ezq/xUrYEBGaOWAWUANj+564JS8J/WwAVWZJctAp7sUaMMEaFqcDaY9US+megZJraX2C45BmgDaGQcKHIUjrXV39gizt2jCxBXTxUxafskKF1nx93SZkKuRmy2znFt1ewFooRJisl+IEnaGqtCtqt7TLq6lRw0rYGpX94VXhapk8izv4awjjUDR2KEZu4rcBcU+Xbpi9QWLR2qLEdcShZI++M/KU7STAjTzPgcADReVnL09nd99VnhPTwYIkPau22Q3+YUpcyxho9A522ZbYkgWCBAiIqFA9X1E8XsVXJ/p2Q17cQtNu97GkKerltlioxZFy9ck1533CNew3nXd8CprMQQd4uL5rCX3C6rhdossKpKmAkUSnzuh7Duy/emzy1jGEBkQagX1YBbFxkSUaQbDL+RHW89KFiU7C/WOsoauAc3twpNB/cJbdV4V/r/9SeenCOc1KGwMt61pbpAb6Gn0B51etqYvUnAE8ZQs3qB8+cqHn85Ej6P7XzuuMICrsNj2vNvtP+frz7KICmgLTf9TzkgBEzd60YhgD1tldcT9N7+FeiAeaeGIao3pleCiqlWjJN83pWl5Dwq4ZsNodDicDtO0A4lgub+YdSgdjqetF1GAmPaw/SX6eR8J3WCNE6V95A="

## PyPI support (pip install twine)
#  PYPI_USERNAME: numenta
#  PYPI_PASSWORD:
#    secure: UgABryPYZg823OcD1XRosA==

  matrix:
#    # Win64-gcc
#    - NC_CMAKE_GENERATOR: "MinGW Makefiles"
#      external_static_subdir: "windows64-gcc"
#      wheel_name_suffix: "win_amd64"

#    # Win32-gcc
#    - NC_CMAKE_GENERATOR: "MinGW Makefiles"
#      PYTHON_VERSION: "2.7.9"
#      PYTHON_ARCH: "32"
#      PYTHONHOME: "C:\\Python27"
#      external_static_subdir: "windows32-gcc"
#      wheel_name_suffix: "win32"

    # Win64-Visual Studio
    - NC_CMAKE_GENERATOR: "Visual Studio 15 2017 Win64"
      PYTHON_VERSION: "3.6.6"
      PYTHON_ARCH: "64"
      PYTHONHOME: "C:\\Python36-x64"
      #PYTHONHOME: "C:\\Users\\appveyor\\AppData\\Roaming\\Python\\Python36"
      PYTHONPATH: "%PYTHONHOME%"
      PATH: "%PYTHONHOME%\\Scripts;%PYTHONHOME%;%PATH%"
      wheel_name_suffix: "win_amd64"

matrix:
  fast_finish: true
  ##  Dont know where this goes: skip_branch_with_pr: true
  #allow_failures:
  #  # enable this to prevent CI from failing even if there are errors.
  


#---------------------------------#
#       build configuration       #
#---------------------------------#
before_build:
#  - ps: gitversion /l console /output buildserver

build_script:
  # Dump appveyor build vars for diagnostics
  - "ECHO APPVEYOR_FORCED_BUILD: %APPVEYOR_FORCED_BUILD%"
  - "ECHO APPVEYOR_RE_BUILD: %APPVEYOR_RE_BUILD%"

  - for /f %%i in ('type VERSION') do set BINDINGS_VERSION=%%i
  - echo Binding version = %BINDINGS_VERSION%

  - python -m pip install --user --upgrade pip setuptools setuptools-scm wheel || exit
  - python -m pip install --no-cache-dir --user -r bindings/py/packaging/requirements.txt  || exit


  # Build the library with the python interface (64bit Release build)
  - cd %HTM_CORE%
  - python setup.py install --user --force
  

after_build:
  # Run unit_tests (C++)
  - cd %HTM_CORE%
  - mkdir %ARTIFACTS_DIR%
  - cd %HTM_CORE%\build\Release\bin
  - unit_tests.exe --gtest_output=xml:%ARTIFACTS_DIR%\unit_tests_report.xml

  # Run python tests
  - cd %HTM_CORE%
  - python setup.py test

  # Build the wheel
  - python setup.py bdist_wheel

  # Build the github package in build/scripts/*.zip or build/scripts/*.tar.gz
  - cd %HTM_CORE%\build\scripts
  - cmake --build . --config Release --target PACKAGE

# Disable automatic tests
test: off

artifacts:
  # Non-recursive search in build folder for Wheels
  - path: '%HTM_CORE%\build\scripts\*.zip'

# NOTE: This is turned off and will likely be removed once deployments of
#       releases are controlled from a central authority. -- Matt
# -----------------------------------------------------------------------
# on_success:
#   # Github tagged builds
#   - cmd: echo "executing on_success"
#   - ps: >-
#       If ($env:APPVEYOR_REPO_TAG -eq "true" -or $env:APPVEYOR_REPO_TAG -eq "True") {
#         Write-Host "Uploading bindings to PYPI"
#         pip install httplib requests twine --upgrade
#         twine upload -u $env:PYPI_USERNAME -p $env:PYPI_PASSWORD -r pypi $env:HTM_CORE\bindings\py\dist\htm.bindings-$env:BINDINGS_VERSION-cp27-none-$env:wheel_name_suffix.whl
#       }

deploy:
## GitHub
# Deploy to GitHub Releases
# see https://www.appveyor.com/docs/deployment/github/
#
  release: 'testing' #htmcore-win64-v$(appveyor_build_version)
  description: 'HTM.core binary release for Windows (64bit)' #desc is mandatory
  provider: GitHub
  auth_token: 
    secure: "%GITHUB_TOKEN%"
  artifact: '%HTM_CORE%\build\scripts\*.zip' # upload .zip from 'make package'
  draft: false
  prerelease: false
  force_update: true #override files in existing release
  on:
    branch: master                # release from master branch only
    appveyor_repo_tag: true       # deploy on tag push only
