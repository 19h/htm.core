#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 0.3.0.{build}

branches:
  only:
    - master
    - appveyor-build

  except:
    - gh-pages

skip_commits:
  # Add [av skip] to commit messages to skip AppVeyor building
  # Add [ci skip] to skip Travis and AppVeyor building
  message: /\[av skip\]/ 

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# http://www.appveyor.com/docs/environment-variables
# http://www.appveyor.com/docs/installed-software

# Build VM template
#os: Windows Server 2012
# http://www.appveyor.com/blog/2015/06/23/new-oss-build-environment-and-xamarin-support

init:
  - git config --global core.autocrlf input

clone_folder: c:\projects\nupic-core

# Can't have a shallow clone because the CMake process will be
# calling into git to write the current SHA into the binaries.
shallow_clone: false

environment:
  PYTHON_ARCH: "64"
  COMPILER_FAMILY: GCC
      
  matrix:
    - PYTHON_VERSION: "2.7.9"
      PYTHONPATH: "C:\\Python27-x64"
      DEPLOY_TO_NUGET: 0

    - PYTHON_VERSION: "3.5.0rc2"
      PYTHONPATH: "C:\\Python35-x64"
      DEPLOY_TO_NUGET: 0

matrix:
  fast_finish: false
  allow_failures:
    - PYTHON_VERSION: "3.5.0rc2"
      
nuget:
  account_feed: true
  project_feed: true
  disable_publish_on_pr: true
  # disable publishing of .nupkg artifacts to
  # account/project feeds for pull request builds

#---------------------------------#
#       build configuration       #
#---------------------------------#

configuration: Release

cache:
  - x86_64-4.8.3-release-posix-seh-rt_v3-rev0.7z
  - LLVM-3.6.0-win32.exe
  - x86_64-w64-mingw32-clang-3.2-release-win64_rubenvb.7z
  - python-3.5.0rc2-amd64.exe

install:
  - set REPO_DIR=c:\projects\nupic-core
  - set NUPIC_DEPLOYMENT_BUILD=1
  - set EXT_LIBS=%REPO_DIR%\external\windows64\lib

  #- ECHO "Filesystem root:"
  #- ps: "ls \"C:/\""

  #- ECHO "Installed Windows SDKs:"
  #- ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  - ECHO "Installing GCC 4.8.3 (x64, posix, rev0):"
  - ps: >-
      if (-Not (Test-Path "x86_64-4.8.3-release-posix-seh-rt_v3-rev0.7z")) {
        $url  = "http://sourceforge.net/projects/mingw-w64/files/"

        $url += "Toolchains%20targetting%20Win64/Personal%20Builds/"

        $url += "mingw-builds/4.8.3/threads-posix/seh/"

        $url += "x86_64-4.8.3-release-posix-seh-rt_v3-rev0.7z/download"

        Invoke-WebRequest -UserAgent wget -Uri $url -OutFile x86_64-4.8.3-release-posix-seh-rt_v3-rev0.7z

      }

      7z x -oC:\ x86_64-4.8.3-release-posix-seh-rt_v3-rev0.7z > $null

  - set CC=gcc
  - set CXX=g++
  - set PATH=C:\mingw64\bin;%PATH%

  - ECHO "Installing Clang 3.2:"
  - ps: >-
      if (-Not (Test-Path "x86_64-4.8.3-release-posix-seh-rt_v3-rev0.7z")) {
        $url  = "http://sourceforge.net/projects/mingw-w64/files/"

        $url += "Toolchains%20targetting%20Win64/Personal%20Builds/"

        $url += "rubenvb/clang-3.2-release/"

        $url += "x86_64-w64-mingw32-clang-3.2-release-win64_rubenvb.7z/download"

        Invoke-WebRequest -UserAgent wget -Uri $url -OutFile x86_64-w64-mingw32-clang-3.2-release-win64_rubenvb.7z

      }

      7z x -oC:\Clang\ x86_64-w64-mingw32-clang-3.2-release-win64_rubenvb.7z > $null

#  - set CC=clang
#  - set CXX=clang++
  - set PATH=C:\Clang\mingw64\bin;%PATH%
  - dir C:\Clang\mingw64\bin

  - cd %REPO_DIR%\ci\appveyor

  # Install Python 2.7.x or 3.5.0rc2
  - ps: >-
      if ($env:PYTHON_VERSION -Match "3.5.0rc2") {
        if (-Not (Test-Path "python-3.5.0rc2-amd64.exe")) {
          $url  = "https://www.python.org/ftp/python/3.5.0/python-3.5.0rc2-amd64.exe"

          Invoke-WebRequest -UserAgent wget -Uri $url -OutFile python-3.5.0rc2-amd64.exe

        }

        ECHO "Installing Python 3.5.0 RC2:"

        python-3.5.0rc2-amd64.exe /p /q CompileAll=1 PrependPath=0 Include_test=0 TargetDir=$env:PYTHONPATH

        ECHO "Installing NumPy 1.9.2:"

        pip install "numpy-1.9.2+mkl-cp35-none-win_amd64.whl"

      } else {
        ECHO "Installing Python 2.7.x:"

        .\install_python_pip.ps1

      }

  - set PYTHONPATH=%PYTHONPATH%
  - set PATH=%PYTHONPATH%;%PYTHONPATH%\Scripts;%PATH%

  - ECHO "PATH is now:"
  - echo %PATH%

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Use the pre-installed mingw
  - ps: $env:PATH = 'C:\MinGW\bin;C:\MinGW\mingw32\bin;C:\MinGW\msys\1.0\bin;' + $env:PATH

  # Copy mingw32-make to have a "make" executable
  - cmd: copy c:\MinGW\bin\mingw32-make.exe c:\MinGW\bin\make.exe

  # Install the LLVM distribution
  - cmd: mkdir LLVM_DOWNLOAD
  - cmd: cd LLVM_DOWNLOAD
  - ps: >-
      if (-Not (Test-Path "LLVM-3.6.0-win32.exe")) {
        $url  = "http://llvm.org/releases/3.6.0/LLVM-3.6.0-win32.exe"

        Invoke-WebRequest -UserAgent wget -Uri $url -OutFile LLVM-3.6.0-win32.exe

      }

  - cmd: 7z x LLVM-3.6.0-win32.exe
  - cmd: ren $_OUTDIR LLVM-3.6.0
  - cmd: move LLVM-3.6.0 c:\
  - ps: $env:PATH = 'c:\LLVM-3.6.0\bin;' + $env:PATH

  # Associated Python modules
  - cmd: C:\Python27-x64\scripts\pip install futures
  - cmd: C:\Python27-x64\scripts\pip install clang==3.5
  - ps: $env:PATH = 'c:\Python27-x64\Lib\site-packages;' + $env:PATH
  
  # Check NumPy installed correctly
  - cmd: pip list

  - cd %REPO_DIR%
  - mkdir %REPO_DIR%\build\
  - mkdir %REPO_DIR%\build\release

  - mkdir %REPO_DIR%\build\scripts
  - cd %REPO_DIR%\build\scripts

  # Remove sh.exe from the paths
  - set PATH=%PATH:C:\Program Files (x86)\Git\bin;=%
  - set PATH=%PATH:C:\MinGW\msys\1.0\bin;=%

  # Fake KJ-Async and Capnp-RPC libs, not needed in Lite mode
  # http://www.cmake.org/Wiki/CmakeMingw
  - cmake -G "MinGW Makefiles"
     -DCMAKE_TOOLCHAIN_FILE=%REPO_DIR%\src\cmake\MinGW-CrossCompile-Windows.cmake
     -DCMAKE_BUILD_TYPE=Release
     -DCMAKE_INSTALL_PREFIX=%REPO_DIR%\build\release
     -DPYTHON_LIBRARY=%PYTHONPATH%\libs
     -DPYTHON_INCLUDE_DIR=%PYTHONPATH%\include
     -DCAPNP_INCLUDE_DIRS=%REPO_DIR%\external\windows64\include
     -DCAPNP_EXECUTABLE=%REPO_DIR%\external\windows64\bin\capnp.exe
     -DCAPNPC_CXX_EXECUTABLE=%REPO_DIR%\external\windows64\bin\capnpc-c++.exe
     -DCAPNPC_LIB=%EXT_LIBS%\capnp.lib
     -DCAPNP_LIB_KJ=%EXT_LIBS%\kj.lib
     -DCAPNP_LIB_CAPNP=%EXT_LIBS%\capnp.lib
     -DCAPNP_LIB_KJ-ASYNC=%EXT_LIBS%\kj.lib
     -DCAPNP_LIB_CAPNP-RPC=%EXT_LIBS%\capnp.lib
     -DLIB_STATIC_APR1_LOC=%EXT_LIBS%\apr-1.lib
     -DLIB_STATIC_APRUTIL1_LOC=%EXT_LIBS%\aprutil-1.lib
     -DLIB_STATIC_YAML_CPP_LOC=%EXT_LIBS%\yaml-cpp.lib
     -DLIB_STATIC_YAML_LOC=%EXT_LIBS%\yaml.lib
     -DLIB_STATIC_Z_LOC=%EXT_LIBS%\z.lib
     %REPO_DIR%\src
  #   -DCMAKE_EXPORT_COMPILE_COMMAND=ON Only for 'Unix Makefiles' and 'Ninja' generators
  #   -DCMAKE_USER_MAKE_RULES_OVERRIDE="%REPO_DIR%\ci\appveyor\ClangOverrides.txt"
  #   -D_CMAKE_TOOLCHAIN_PREFIX=llvm-

build_script:
  - cd %REPO_DIR%\build\scripts

  # Add back in sh.exe
  #- set PATH=C:\MinGW\msys\1.0\bin;%PATH%
  #- cmd: sh -c "g++ -E -x c++ - -v < /dev/null"
  #- cmd: type  c:\mingw\include\unistd.h
  #- cmd: sh -c "grep -rnC20 _exit c:/mingw/include"

  - mingw32-make -f Makefile
  - mingw32-make -f Makefile install

  - cd %REPO_DIR%
  - set NUPIC_CORE_RELEASE=%REPO_DIR%\build\release

  - python setup.py install --user --nupic-core-dir=%NUPIC_CORE_RELEASE%

after_build:
  - cd %REPO_DIR%\build\Release
  - set PROJECT_BUILD_ARTIFACTS_DIR=%REPO_DIR%\build\artifacts

  - ps: >-
      if($env:DEPLOY_TO_NUGET -eq 1) {
        $root = $env:APPVEYOR_BUILD_FOLDER

        $versionStr = $env:APPVEYOR_BUILD_VERSION

        Write-Host $root

        Write-Host "Setting Package.nuspec version tag to $versionStr"

        $content = (Get-Content $root\Package.nuspec) 

        $content = $content -replace '\$version\$',$versionStr

        $content | Out-File $root\Package.nuspec

        copy $env:REPO_DIR\Package.nuspec .

        nuget pack -version $env:APPVEYOR_BUILD_VERSION

        nuget push *.nupkg 30618afb-ecf6-4476-8e61-a5b823ad9892
        # NOTE: Push to nuget is here, rather than normal AV deployment

      }

      # This packages via CMakeList CPack settings

      7z a -ttar -y -bd nupic_core-$env:APPVEYOR_REPO_COMMIT-windows64.tar . | findstr /b /c:"Everything is Ok" /c:"Scanning" /c:"Creating archive"

      7z a -tgzip -y -bd ..\..\nupic_core-$env:APPVEYOR_REPO_COMMIT-windows64.tar.gz nupic_core-$env:APPVEYOR_REPO_COMMIT-windows64.tar

artifacts:
  - path: '**\*.tar.gz' # find all Gz(ip) packages recursively

deploy:
  # Amazon S3 deployment provider settings
  - provider: S3
    access_key_id:
      secure: /9U0mCHp3k1U8Y5CY/kDqwCKG2gqchG/T/UlVWo8SME=
    secret_access_key:
      secure: /8wO17Gir0XAiecJkHeE3jxOJzvyl0+uWcl7BKCuN0FC795golsL8905VmNuRl1o
    bucket: "artifacts.numenta.org"
    region: us-west-2
    set_public: true
    artifact: "nupic_core-$(APPVEYOR_REPO_COMMIT)-windows64.tar.gz"
    folder: "numenta/nupic.core"
    on:
      branch: master

test: off
