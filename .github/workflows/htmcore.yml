name: htm.core build

on:
  push:
    branches:
      - 'v*.*.*' # vX.Y.Z release tag
  # run on pull_request events that target the master branch
  pull_request:
    branches:
    - master
  # run every day of the week at 02:00
  schedule:
  - cron: 0 2 * * *
      
jobs:
  build:
    name: Building on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      #max-parallel: 4
      matrix:
        python-version: [3.7]
        os: [ubuntu-18.04, windows-2019, macOS-latest]

    steps:
    - uses: actions/checkout@v1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Versions
      run: |
        python --version
        cmake --version
        c++ --version

    - name: Install dependencies (gcc-8)
      if: matrix.os == 'ubuntu-18.04'
      env:
        CC: gcc-8
        CXX: g++-8
      run: |
        sudo apt-get update
        sudo apt-get -y install gcc-8 g++-8
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install -r requirements.txt
        mkdir -p build/scripts
        cd build/scripts
        cmake ../..

    - name: Install dependencies
      if: matrix.os != 'ubuntu-18.04'
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install -r requirements.txt
        mkdir -p build/scripts
        cd build/scripts
        cmake ../..

    - name: build htmcore with setup.py
      run: python setup.py install --user

    - name: C++ & Python Tests
      run: python setup.py test

    - name: Release (make package)
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      run: |
        python setup.py bdist_wheel
        cd build/scripts
        cmake --build . --config Release --target install # aka make install ,but multiplatform
        cmake --build . --config Release --target package # make package

    - name: Release (deploy)
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      # from https://github.com/marketplace/actions/gh-release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/scripts/htm_core-v*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: pre-PyPI
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      #copy dist data to /dist, where PyPI Action expects it
      run: |
        cp -a build/Release/distr/dist .
        ls dist

    - name: Publish to PyPI
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}
        repository_url: https://test.pypi.org/legacy/ #TODO rm for real pypi



  build-debug:
    name: Build and test in Debug mode
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1

    - name: Set up Cpp compilers
      run: |
        sudo apt-get update
        sudo apt-get -y install gcc-8 g++-8

    - name: Config
      run: |
        cmake --version
        g++ --version

    - name: Debug build htmcore with cmake
      env:
        CC: gcc-8
        CXX: g++-8
      run: |
        echo "built type: ${CMAKE_BUILD_TYPE}"
        mkdir -p build/scripts
        cd build/scripts
        cmake ../.. -DCMAKE_BUILD_TYPE=Debug
        make -j4 && make install

    - name: C++ Tests
      run: |
        cd build/scripts
        ../Debug/bin/unit_tests
      
    - name: Memory leaks check (valgrind)
      run:
        sudo apt-get -y install valgrind
        LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${PWD}/build/Release/lib valgrind  --show-leak-kinds=definite,indirect,possible,reachable --track-origins=yes --num-callers=40 --error-exitcode=3 ./build/Release/bin/benchmark_hotgym 5 || exit 1

